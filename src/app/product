// src/app/product/[slug]/page.tsx
import type { Metadata } from "next";
import { notFound } from "next/navigation";
import Image from "next/image";
import Link from "next/link";
import type { Product, Image as PrismaImage } from "@prisma/client";

import { prisma } from "@/lib/db";
import { formatPrice } from "@/lib/utils";

type ProductWithImages = Product & { images: PrismaImage[] };

export const dynamic = "force-dynamic"; // fetch from DB at request time

export async function generateMetadata(
  { params }: { params: { slug: string } }
): Promise<Metadata> {
  const p = await prisma.product.findUnique({
    where: { slug: params.slug },
    select: { title: true, description: true, images: { select: { url: true } } },
  });

  if (!p) return { title: "Product not found – JadePocketShop" };

  return {
    title: `${p.title} – JadePocketShop`,
    description: p.description ?? undefined,
    openGraph: {
      title: p.title,
      description: p.description ?? undefined,
      images: p.images?.[0]?.url ? [p.images[0].url] : [],
    },
  };
}

export default async function ProductPage(
  { params }: { params: { slug: string } }
) {
  const product = await prisma.product.findUnique({
    where: { slug: params.slug },
    include: { images: true },
  });

  if (!product) notFound();

  const mainImage = product.images[0]?.url ?? "/placeholder.png";
  const compare = product.compareAtCents ?? null;
  const onSale = typeof compare === "number" && compare > product.priceCents;
  const salePct =
    onSale && compare ? Math.round(((compare - product.priceCents) / compare) * 100) : 0;

  return (
    <div className="mx-auto max-w-6xl px-4 py-10">
      <Link href="/" className="text-sm text-gray-500 hover:text-emerald-600">
        &larr; Back to shop
      </Link>

      <div className="mt-6 grid grid-cols-1 gap-10 md:grid-cols-2">
        {/* Image */}
        <div className="relative aspect-square overflow-hidden rounded-2xl bg-gray-100">
          <Image
            src={mainImage}
            alt={product.images[0]?.alt || product.title}
            fill
            className="object-cover"
            sizes="(min-width: 768px) 50vw, 100vw"
            priority={false}
          />
          {onSale && (
            <div className="absolute left-3 top-3 rounded-full bg-red-500 px-3 py-1 text-xs font-bold text-white shadow">
              -{salePct}% OFF
            </div>
          )}
        </div>

        {/* Details */}
        <div>
          {product.brand && (
            <p className="text-xs font-medium uppercase tracking-wider text-emerald-700">
              {product.brand}
            </p>
          )}

          <h1 className="mt-1 text-3xl font-semibold text-gray-900">
            {product.title}
          </h1>

          <div className="mt-4 flex items-baseline gap-3">
            <span className="text-2xl font-bold">
              {formatPrice(product.priceCents)}
            </span>
            {onSale && compare && (
              <>
                <span className="text-sm text-gray-500 line-through">
                  {formatPrice(compare)}
                </span>
                <span className="rounded-full bg-red-500/10 px-2 py-0.5 text-xs font-semibold text-red-600">
                  Save {salePct}%
                </span>
              </>
            )}
          </div>

          {product.inventory !== null && (
            <p className="mt-2 text-sm text-gray-600">
              {product.inventory > 5
                ? "In Stock"
                : product.inventory > 0
                ? `Only ${product.inventory} left`
                : "Out of Stock"}
            </p>
          )}

          {product.description && (
            <p className="mt-6 leading-relaxed text-gray-700">
              {product.description}
            </p>
          )}

          <div className="mt-8">
            {product.inventory && product.inventory > 0 ? (
              <button className="rounded-xl bg-emerald-600 px-6 py-3 font-medium text-white hover:bg-emerald-700">
                Add to Cart
              </button>
            ) : (
              <div className="rounded-xl border border-amber-300 bg-amber-50 px-4 py-3 text-amber-800">
                Out of stock
              </div>
            )}
          </div>

          {Array.isArray(product.tags) && product.tags.length > 0 && (
            <div className="mt-6 flex flex-wrap gap-2">
              {product.tags.map((t, i) => (
                <span
                  key={i}
                  className="rounded-full bg-gray-100 px-3 py-1 text-xs text-gray-600"
                >
                  #{t}
                </span>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Gallery */}
      {product.images.length > 1 && (
        <div className="mt-10 grid grid-cols-2 gap-3 md:grid-cols-4">
          {product.images.slice(1, 5).map((img) => (
            <div
              key={img.id}
              className="relative aspect-square overflow-hidden rounded-xl bg-gray-100"
            >
              <Image
                src={img.url}
                alt={img.alt || product.title}
                fill
                className="object-cover"
                sizes="(min-width: 768px) 25vw, 50vw"
              />
            </div>
          ))}
        </div>
      )}
    </div>
  );
}
